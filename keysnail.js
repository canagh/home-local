// Generated by CoffeeScript 1.6.3
/*{{%PRESERVE%*/


(function() {
  var edit, fake, ignore, local, pass, view;

  local = plugins.options["site_local_keymap.local_keymap"] = {};

  fake = function(k, i) {
    return function() {
      return key.feed(k, i);
    };
  };

  pass = function(k, i) {
    return [k, fake(k, i)];
  };

  ignore = function(k) {
    return [k, null];
  };

  local[/^https?:\/\/(\w+\.)*slashdot\.jp\//] = [ignore('h'), ignore('j'), ignore('k'), ignore('l')];

  /*}}%PRESERVE%*/


  view = function() {
    var a;
    a = Array.prototype.slice.call(arguments);
    return key.setViewKey.apply(key, [a[0], a[a.length - 1]].concat(a.slice(1, +(a.length - 2) + 1 || 9e9)));
  };

  edit = function() {
    var a;
    a = Array.prototype.slice.call(arguments);
    return key.setEditKey.apply(key, [a[0], a[a.length - 1]].concat(a.slice(1, +(a.length - 2) + 1 || 9e9)));
  };

  key.quitKey = "undefined";

  key.helpKey = "undefined";

  key.escapeKey = "C-v";

  key.macroStartKey = "undefined";

  key.macroEndKey = "undefined";

  key.universalArgumentKey = "undefined";

  key.negativeArgument1Key = "undefined";

  key.negativeArgument2Key = "undefined";

  key.negativeArgument3Key = "undefined";

  key.suspendKey = "C-z";

  view('e', 'Hok - Foreground hint mode', true, function(ev, arg) {
    return ext.exec("hok-start-foreground-mode", arg);
  });

  view('E', 'HoK - Background hint mode', true, function(ev, arg) {
    return ext.exec("hok-start-background-mode", arg);
  });

  view(';', 'Start extended hint mode', true, function(ev, arg) {
    return ext.exec("hok-start-extended-mode", arg);
  });

  view(['C-c', 'C-e'], 'Start continuous HaH', true, function(ev, arg) {
    return ext.exec("hok-start-continuous-mode", arg);
  });

  view('c', 'Hok - Foreground yank hint mode', true, function(ev, arg) {
    return ext.exec("hok-yank-foreground-mode", arg);
  });

  view('h', 'Scroll left', function(ev) {
    return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_LEFT, true);
  });

  view('j', 'Scroll line down', function(ev) {
    return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_DOWN, true);
  });

  view('k', 'Scroll line up', function(ev) {
    return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_UP, true);
  });

  view('l', 'Scroll right', function(ev) {
    return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_RIGHT, true);
  });

  view('g', 'Scroll to the top of the page', true, function() {
    return goDoCommand("cmd_scrollTop");
  });

  view('G', 'Scroll to the bottom of the page', true, function() {
    return goDoCommand("cmd_scrollBottom");
  });

  view('r', 'Reload the page', true, function() {
    return BrowserReload();
  });

  view('R', 'Reload (Skip cache)', true, function() {
    return BrowserReloadSkipCache();
  });

  view('[', 'Back', function() {
    return BrowserBack();
  });

  view(']', 'Forward', function() {
    return BrowserForward();
  });

  view('w', 'Close tab / window', function() {
    return BrowserCloseTabOrWindow();
  });

  view('t', 'Open the new tab', function() {
    return BrowserOpenTab();
  });

  view('T', 'Undo closed tab', function() {
    return undoCloseTab();
  });

  view('n', 'Select next tab', function() {
    return getBrowser().mTabContainer.advanceSelectedTab(1, true);
  });

  view('p', 'Select previous tab', function() {
    return getBrowser().mTabContainer.advanceSelectedTab(-1, true);
  });

  view('N', 'Move selected tab to left', function(ev) {
    var browser, pos;
    browser = getBrowser();
    pos = (function() {
      if (this.previousSibling) {
        return this._tPos + 1;
      } else {
        return 0;
      }
    }).call(browser.mCurrentTab);
    return browser.moveTabTo(browser.mCurrentTab, pos);
  });

  view('P', 'Move selected tab to left', function(ev) {
    var browser, pos;
    browser = getBrowser();
    pos = (function() {
      if (this.previousSibling) {
        return this._tPos - 1;
      } else {
        return this.childNodes.length - 1;
      }
    }).call(browser.mCurrentTab);
    return browser.moveTabTo(browser.mCurrentTab, pos);
  });

  view('f', 'Forcus to the first textarea', true, function(ev) {
    return command.focusElement(command.elementsRetrieverTextarea, 0);
  });

  view(':', 'List and execute commands', true, function(ev, arg) {
    return shell.input(null, arg);
  });

  edit('C-h', 'Delete backward char', function() {
    return goDoCommand("cmd_deleteCharBackward");
  });

  edit('C-d', 'Delete forward char', function() {
    return goDoCommand("cmd_deleteCharForward");
  });

  edit('C-k', 'Kill the rest of the line', function(ev) {
    return command.killLine(ev);
  });

  edit('C-a', 'Beginning of the line', function(ev) {
    return command.beginLine(ev);
  });

  edit('C-e', 'End of the line', function(ev) {
    return command.endLine(ev);
  });

}).call(this);
