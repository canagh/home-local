// Generated by CoffeeScript 1.6.3
/*{{%PRESERVE%*/

var edit, fake, ignore, local, pass, view;

local = {};

plugins.options["site_local_keymap.local_keymap"] = local;

fake = function(k, i) {
  return function() {
    return key.feed(k, i);
  };
};

pass = function(k, i) {
  return [k, fake(k, i)];
};

ignore = function(k) {
  return [k, null];
};

local["^https?://(\w+\.)*slashdot.jp/"] = [ignore('h'), ignore('j'), ignore('k'), ignore('l')];

/*}}%PRESERVE%*/


view = function() {
  var a;
  a = Array.prototype.slice.call(arguments);
  return key.setViewKey.apply(key, [a[0], a[a.length - 1]].concat(a.slice(1, +(a.length - 2) + 1 || 9e9)));
};

edit = function() {
  var a;
  a = Array.prototype.slice.call(arguments);
  return key.setEditKey.apply(key, [a[0], a[a.length - 1]].concat(a.slice(1, +(a.length - 2) + 1 || 9e9)));
};

key.quitKey = "C-[";

key.helpKey = "undefined";

key.escapeKey = "C-v";

key.macroStartKey = "undefined";

key.macroEndKey = "undefined";

key.universalArgumentKey = "undefined";

key.negativeArgument1Key = "undefined";

key.negativeArgument2Key = "undefined";

key.negativeArgument3Key = "undefined";

key.suspendKey = "C-z";

view('e', 'Hok - Foreground hint mode', true, function(ev, arg) {
  return ext.exec("hok-start-foreground-mode", arg);
});

view('E', 'HoK - Background hint mode', true, function(ev, arg) {
  return ext.exec("hok-start-background-mode", arg);
});

view(';', 'Start extended hint mode', true, function(ev, arg) {
  return ext.exec("hok-start-extended-mode", arg);
});

view(['C-c', 'C-e'], 'Start continuous HaH', true, function(ev, arg) {
  return ext.exec("hok-start-continuous-mode", arg);
});

view('c', 'Hok - Foreground yank hint mode', true, function(ev, arg) {
  return ext.exec("hok-yank-foreground-mode", arg);
});

view('h', 'Scroll left', function(ev) {
  return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_LEFT, true);
});

view('j', 'Scroll line down', function(ev) {
  return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_DOWN, true);
});

view('k', 'Scroll line up', function(ev) {
  return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_UP, true);
});

view('l', 'Scroll right', function(ev) {
  return key.generateKey(ev.originalTarget, KeyEvent.DOM_VK_RIGHT, true);
});

view(['g', 'g'], 'Scroll to the top of the page', true, function() {
  return goDoCommand("cmd_scrollTop");
});

view('G', 'Scroll to the bottom of the page', true, function() {
  return goDoCommand("cmd_scrollBottom");
});

view('r', 'Reload the page', true, function() {
  return BrowserReload();
});

view('H', 'Back', function() {
  return BrowserBack();
});

view('L', 'Forward', function() {
  return BrowserForward();
});

view('d', 'Close tab / window', function() {
  return BrowserCloseTabOrWindow();
});

view('u', 'Undo closed tab', function() {
  return undoCloseTab();
});

view('w', 'Select next tab', function() {
  return getBrowser().mTabContainer.advanceSelectedTab(1, true);
});

view('b', 'Select previous tab', function() {
  return getBrowser().mTabContainer.advanceSelectedTab(-1, true);
});

view('W', 'Move selected tab to left', function(ev) {
  var browser, pos;
  browser = getBrowser();
  pos = (function() {
    if (this.previousSibling) {
      return this._tPos + 1;
    } else {
      return 0;
    }
  }).call(browser.mCurrentTab);
  return browser.moveTabTo(browser.mCurrentTab, pos);
});

view('B', 'Move selected tab to left', function(ev) {
  var browser, pos;
  browser = getBrowser();
  pos = (function() {
    if (this.previousSibling) {
      return this._tPos - 1;
    } else {
      return this.childNodes.length - 1;
    }
  }).call(browser.mCurrentTab);
  return browser.moveTabTo(browser.mCurrentTab, pos);
});

view('/', 'Incremental search forward', function() {
  return command.iSearchForward();
});

view('?', 'Incremental search backward', function() {
  return command.iSearchBackward();
});

view('f', 'Forcus to the first textarea', true, function(ev) {
  return command.focusElement(command.elementsRetrieverTextarea, 0);
});

view(':', 'List and execute commands', true, function(ev, arg) {
  return shell.input(null, arg);
});

view('i', 'Toggle caret mode', true, function(ev, arg) {
  return util.setBoolPref("accessibility.browsewithcaret", !util.getBoolPref("accessibility.browsewithcaret"));
});

view('y', 'Yank current page address', true, function(ev, arg) {
  command.setClipboardText(content.document.location.href);
  return display.echoStatusBar("Yanked " + content.document.location.href);
});

view('p', 'Open yanked address or google it', true, function(ev, arg) {
  var url;
  url = command.getClipboardText();
  if (url.match(/\s/) || url.indexOf("://") === -1) {
    url = "http://www.google.com/search?q=" + encodeURIComponent(url) + "&ie=utf-8&oe=utf-8&aq=t";
  }
  return getBrowser().loadOneTab(url, null, null, null, false);
});

edit('C-h', 'Delete backward char', function() {
  return goDoCommand("cmd_deleteCharBackward");
});

edit('C-d', 'Delete forward char', function() {
  return goDoCommand("cmd_deleteCharForward");
});

edit('C-k', 'Kill the rest of the line', function(ev) {
  return command.killLine(ev);
});

edit('C-a', 'Beginning of the line', function(ev) {
  return command.beginLine(ev);
});

edit('C-e', 'End of the line', function(ev) {
  return command.endLine(ev);
});
