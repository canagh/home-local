#!/usr/bin/python3

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('args', metavar='ARG', nargs='*', help='DATE or FILE')
# root dir
parser.add_argument('-d', '--date', metavar='DATE')
# target file
parser.add_argument('-f', '--file', metavar='FILE')
parser.add_argument('--diary',
        action='store_const', const='diary.md', dest='file')
# action
parser.add_argument('-e', '--edit',
        action='store_const', const='edit', dest='action', default='edit')
parser.add_argument('-p', '--print',
        action='store_const', const='print', dest='action')
parser.add_argument('-l', '--list',
        action='store_const', const='list', dest='action')
args = parser.parse_args()

import datetime
def parse_date(arg):
    if arg.startswith('+') or arg.startswith('-'):
        return datetime.date.today() + datetime.timedelta(days=int(arg))
    else:
        import dateutil.parser
        return dateutil.parser.parse(arg) # or raise

if args.date is not None:
    try:
        args.date = parse_date(args.date)
    except ValueError:
        parser.error('unknown format date: ' + args.date)

for arg in args.args:
    if args.date is None:
        try:
            args.date = parse_date(arg)
            continue
        except ValueError:
            if args.file is not None:
                parser.error('unknown format date: ' + arg)
    if args.file is None:
        args.file = arg
        continue
    parser.error('too many ARGs: ' + arg)

if args.date is None:
    args.date = datetime.date.today()

import os
def root_path():
    return os.environ.get('DIAR_DIR', os.environ['HOME'] + '/.dair')
def day_path(date):
    return root_path() + date.strftime('/%Y/%m/%d')
def edit_file(path, dir=False):
    editor = os.environ.get('VISUAL', os.environ['EDITOR'])
    dirname = path if dir else os.path.dirname(path)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    import subprocess
    subprocess.call([editor, path])
def target_path(default=''):
    return day_path(args.date) + '/' + (args.file or default)

actions = {}
def action_edit() : edit_file(target_path(default='diary.md'), dir=(args.file == ''))
actions['edit'] = action_edit
def action_print() : print(target_path(default=''))
actions['print'] = action_print
def action_list():
    for x in os.listdir(target_path(default='')):
        print(x)
actions['list'] = action_list
actions[args.action]()
