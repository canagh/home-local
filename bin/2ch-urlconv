#!/usr/bin/perl
use warnings;
use strict;
use feature 'switch';
use feature 'say';

use File::Basename;
use Getopt::Long;

use constant {
    THREAD      => 'thread',
    BOARD       => 'board',
    HOST        => 'host',

    DAT         => 'dat',
    SUBJECT     => 'subject',
    READCGI     => 'readcgi',
    BBSCGI      => 'bbscgi',
    BOARD_INDEX => 'board_index',
    TSV         => 'tsv',

    TYPE        => 'type',
    FORCE       => 'force',

    LIVEDOOR    => 'livedoor',
    CH2NET      => '2ch',
};
    # MACHI       => 'machi',

sub parse() {
    my %attr = (HOST => '', BOARD => '', THREAD => '');
    my $string = $_[0];
    $string =~ s/^(h?t)?tps?:\/\//http:\/\//;
    $string =~ s/\W+$//;

    given ($string) {
        when (/^http:\/\/jbbs\.livedoor\.jp$/) { $attr{HOST} = 'jbbs.livedoor.jp'; }
        when (/^http:\/\/([\w.]+)$/)        { $attr{HOST} = $1; }
        when (/^http:\/\/([\w.]+)\/(\w+)$/) { ($attr{HOST}, $attr{BOARD}) = ($1, $2); }

        when (/^jbbs\.livedoor\.jp\W+(\w+\/\d+)$/)         { ($attr{HOST}, $attr{BOARD}               ) = ('jbbs.livedoor.jp', $1, $2); }
        when (/^jbbs\.livedoor\.jp\W+(\w+\/\d+)\W+(\d+)$/) { ($attr{HOST}, $attr{BOARD}, $attr{THREAD}) = ('jbbs.livedoor.jp', $1, $2); }
        when (/^(\w+\/\d{1,6})\W*$/)                       { ($attr{HOST}, $attr{BOARD}               ) = ('jbbs.livedoor.jp', $1, $2); }
        when (/^(\w+\/\d{1,6})\W+(\d+)$/)                  { ($attr{HOST}, $attr{BOARD}, $attr{THREAD}) = ('jbbs.livedoor.jp', $1, $2); }

        when (/^(\w+)\W+(\d+)$/)            { ($attr{BOARD}, $attr{THREAD}) = ($1, $2); }
        when (/^([\w.]+)\W+(\w+)$/)      { ($attr{HOST}, $attr{BOARD}) = ($1, $2); }
        when (/^([\w.]+)\W+(\w+)\W+(\d+)$/) { ($attr{HOST}, $attr{BOARD}, $attr{THREAD}) = ($1, $2, $3); }

        when (/\/read\.cgi\//) {
            ($attr{HOST}, $attr{BOARD}, $attr{THREAD}) = (split '/', $string)[2,5,6];
        }
        when (/\/dat\//) {
            ($attr{HOST}, $attr{BOARD}, $attr{THREAD}) = (split '/', $string)[2,3,5];
            $attr{THREAD} =~ s/\..*$/''/;
        }
        when (/\/subject\.txt$/) {
            ($attr{HOST}, $attr{BOARD}) = (split '/', $string)[2,3];
        }

        when (/^\w+$/) { $attr{BOARD} = $string; }
        default { die basename $0 . ": couldn't parse"; }
    }

    return %attr;
}

sub convert() {
    my %args = @_;
    my $error = sub { die basename $0 . ": couldn't convert: lack of infomation" unless $args{FORCE}; };
    my $worngtype = basename $0 . ': wrong type: ' . $args{TYPE};

    given ($args{TYPE}) {
        when (DAT) {
            $error->() unless $args{THREAD} and $args{BOARD};
            return 'http://jbbs.livedoor.jp/bbs/rawmode.cgi/' . $args{BOARD} . '/' . $args{THREAD} . '/' if ($args{HOST} eq 'jbbs.livedoor.jp');
            return &convert(%args, TYPE => BOARD_INDEX) . 'dat/' . $args{THREAD} . '.dat';
        }
        when (READCGI) {
            $error->() unless $args{HOST} and $args{BOARD} and $args{THREAD};
            return 'http://jbbs.livedoor.jp/bbs/read.cgi/'     . $args{BOARD} . '/' . $args{THREAD} . '/' if ($args{HOST} eq 'jbbs.livedoor.jp');
            return 'http://' . $args{HOST} . '/test/read.cgi/' . $args{BOARD} . '/' . $args{THREAD} . '/';
        }
        when (BBSCGI) {
            $error->() unless $args{HOST};
            return 'http://jbbs.livedoor.jp/bbs/write.cgi/' if ($args{HOST} eq 'jbbs.livedoor.jp');
            return 'http://' . $args{HOST} . '/test/bbs.cgi/';
        }
        when (TSV) {
            $error->() unless $args{HOST} and $args{BOARD} and $args{THREAD};
            return join "\t", ($args{HOST}, $args{BOARD}, $args{THREAD});
        }
        when (BOARD_INDEX) {
            $error->() unless $args{HOST} and $args{BOARD};
            return 'http://' . $args{HOST} . '/' . $args{BOARD} . '/';
        }
        when (SUBJECT) {
            return &convert(%args, TYPE => BOARD_INDEX) . 'subject.txt';
        }
        when (HOST) {
            $error->() unless $args{HOST};
            return $args{HOST};
        }
        when (BOARD) {
            $error->() unless $args{BOARD};
            return $args{BOARD};
        }
        when (THREAD) {
            $error->() unless $args{THREAD};
            return $args{THREAD};
        }
        when (TYPE) {
            return $args{THREAD} ? THREAD : $args{BOARD} ? BOARD : '';
        }
        default {
            die $worngtype;
        }
    }
}

sub solve() {
    my %args = @_[0..5];
    my @hosts = @_[6..$#_];

    unless ($args{HOST}) {
        foreach (@hosts) {
            open FH, $_;
            while (<FH>) {
                chomp $_;
                my ($board, $host) = split "\t", $_;
                if ($args{BOARD} eq $board) {
                    $args{HOST} = $host;
                    close FH;
                    return %args;
                }
            }
            close FH;
        }
    }
    return %args;
}


my $force;
my $ch2dir = ($ENV{'CH2_DIR'} or $ENV{'HOME'} . '/.2ch');
my @hosts = map {$ch2dir . $_} ('/hosts', '/user/hosts');
my $list_types;
my $list_hosts;
die 'Usage: ' . basename $0 . "[-f|--force] [-H|--hosts FILE] [-l|--list] [--list-hosts] TYPE [URL]\n"
    unless GetOptions(
        'f|force' => \$force,
        'H|hosts=s@' => \@hosts,
        'l|list' => \$list_types,
        'list-hosts' => \$list_hosts,
    );

if ($list_types) { map {print $_ . "\n"} (DAT, READCGI, BBSCGI, TSV, BOARD_INDEX, SUBJECT, HOST, BOARD, THREAD, TYPE); exit; }
if ($list_hosts) { map {print $_ . "\n"} @hosts; exit; }

my $type = shift;

my $url = join "\t", @ARGV;
if ($url) {
    say &convert(&solve(&parse($url), @hosts), TYPE => $type, FORCE => $force);
} else {
    while (<>) {
        say &convert(&solve(&parse($_), @hosts), TYPE => $type, FORCE => $force);
    }
}
