#!/bin/bash

CH2_DIR=${CH2_DIR:-$HOME/.2ch}
reload=
simulate=
no_download=
discard=
print_path=
user_agent='Monazilla 1.00'
directory_format=o2on
file_format=raw

while [ "$1" ] ; do
    case "$1" in
        -h | --help )
            echo 'Usage: '$(basename "$0")' [-s|--simulate] [-r|--reload] [-n|--no-download] [-d|--discard] [-p|--print-path] [-U|--user-agent STRING] [-{D,F}|--{directory,file}-format STRING] TARGET..'
            echo 'Download and cache dat/subject from 2ch-like BBS.'
            exit
            ;;
        -r | --reload )
            reload=t
            shift
            ;;
        -s | --simulate )
            simulate=t
            shift
            ;;
        -n | --no-download )
            no_download=t
            shift
            ;;
        -d | --discard )
            discard=t
            shift
            ;;
        -p | --print-path )
            print_path=t
            shift
            ;;
        -U | --user-agent )
            user_agent="$2"
            shift 2
            ;;
        -D | --directory-format )
            directory_format="$2"
            shift 2
            ;;
        -F | --file-format )
            file_format="$2"
            shift 2
            ;;
        -- )
            shift
            break
            ;;
        -* )
            echo $(basename "$0")': unknown option: '\`"$1"\' 1>&2
            exit 1
            ;;
        * )
            break
            ;;
    esac
done

local_path() {
    case "$type" in
        dat )
            case "$directory_format" in
                o2on )
                    read host board thread <<< $(2ch-urlconv tsv "$@")
                    # $() removes trailing \n
                    echo $(echo "$host" | rev | cut -d. -f1,2 | rev)/"$board"/$(echo "$thread" | head -c 4)/"$thread".dat
                    ;;
                * )
                    echo $(basename "$0")': unknown directory format: '\`"$directory_format"\' 1>&2
                    exit 1
                    ;;
            esac
            ;;
        subject )
            case "$directory_format" in
                o2on )
                    read host board <<< $(2ch-urlconv -f tsv "$@")
                    echo $( echo "$host" | rev | cut -d. -f1,2 | rev )/"$board"/subject.txt
                    ;;
                * )
                    echo $(basename "$0")': unknown directory format: '\`"$directory_format"\' 1>&2
                    exit 1
                    ;;
            esac
            ;;
    esac
}

case "$file_format" in
    raw )
        ;;
    * )
        echo $(basename "$0")': unknown file format: '\`"$directory_format"\' 1>&2
        exit 1
        ;;
esac

url=$(2ch-urlconv dat "$@" 2>/dev/null)
if [ 0 -eq $? ]; then
    type=dat
else
    url=$(2ch-urlconv subject "$@" 2>/dev/null)
    if [ 0 -ne $? ]; then
        echo $(basename "$0")': invalid target: '\`"$@"\' 1>&2
        exit 1
    fi
    type=subject
fi
path="$CH2_DIR/$(local_path "$@")"
if [ "$print_path" ]; then
    echo "$path"
    exit
fi

if [ "$simulate" ]; then
    simulate=(echo)
else
    simulate=()
fi
if [ -z "$reload" -a "$type" == dat -a -f "$path" ]; then
    reload=(--continue)
else
    reload=()
fi

if [ "$no_download" ]; then
    "${simulate[@]}" cat "$path"
else
    if [ "$discard" ]; then
        output=(--output-document -)
    else
        [ -d "$(dirname "$path")" ] || "${simulate[@]}" mkdir -p "$(dirname "$path")"
        output=(--output-document "$path")
    fi

    "${simulate[@]}" wget --user-agent "$user_agent" "${reload[@]}" "${output[@]}" -- "$url" 2>/dev/null
    [ ! "$discard" ] && "${simulate[@]}" cat "$path"
fi
