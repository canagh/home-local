#!/usr/bin/python2

import re
import copy

def parse(lines, count=1):
    title = None
    typ = None
    site = None
    for line in lines:
        line = line.rstrip("\n")
        if typ is None or site is None:
            [site, typ] = detect(line)
        result = \
            { '2ch.net' :
                { 'dat': parse_dat_line
                , 'subject': parse_subject_line }
            , 'jbbs.livedoor.jp' :
                { 'dat': parse_dat_line_sitaraba
                , 'subject': parse_subject_line_sitaraba }
            }[site][typ](line)
        if typ == 'dat':
            if 'title' in result:
                title = result['title']
            elif title is not None:
                result['title'] = title
        if 'line' not in result:
            result['line'] = str(count)
        result['type'] = typ
        yield result
        count += 1

def detect(line):
    return \
        { 5: ['2ch.net', 'dat']
        , 2: ['2ch.net', 'subject']
        , 7: ['jbbs.livedoor.jp', 'dat']
        , 1: ['jbbs.livedoor.jp', 'subject']
        } [ len(line.split('<>')) ]

def lrchomp1(string):
    l = len(string)
    return string[ (1 if string[0] == ' ' else 0) : (l-1 if string[l-1] == ' ' else l) ]

def parse_dat_line(line):
    # "NAME<>MAIL<>DATE TIME ID BE<> MESSAGE <>TITLE"
    items = line[:len(line)].split('<>')
    info = items[2].split() + ['', '', '', '']
    return { 'name'    : items[0]
           , 'mail'    : items[1]
           , 'date'    : info[0] # yyyy/mm/dd(D)
           , 'time'    : info[1] # hh:mm:ss:cc
           , 'id'      : info[2] and info[2][4:] # ID:wwwwwwww
           , 'be'      : info[3] and info[3][4:] # BE:dddddddddd-www(dddd)
           , 'message' : lrchomp1(items[3])
           , 'title'   : items[4]
           }

subject_line_re = re.compile(r'^(\d+)\.dat<>(.*) \((\d+)\)$')
def parse_subject_line(line):
    # "THREAD.dat<>TITLE (RESNUM)"
    m = subject_line_re.match(line)
    return { 'thread' : m.group(1)
           , 'title'  : m.group(2)
           , 'res'    : m.group(3)
           }

def parse_dat_line_sitaraba(line):
    # "LINE<>NAME<>MAIL<>DATE TIME<>MESSAGE<>TITLE<>ID"
    items = line[:len(line)].split('<>')
    info = items[3].split()
    return { 'num'     : items[0]
           , 'name'    : items[1]
           , 'mail'    : items[2]
           , 'date'    : info[0] # yyyy/mm/dd(D)
           , 'time'    : info[1] # hh:mm:ss
           , 'message' : items[4]
           , 'title'   : items[5]
           , 'id'      : items[6]
           , 'be'      : ''
           }

subject_line_sitaraba_re = re.compile(r'^(\d+)\.cgi,(.+)\((\d+)\)$')
def parse_subject_line_sitaraba(line):
    # "THREAD.cgi,TITLE(RESNUM)"
    m = subject_line_sitaraba_re.match(line)
    return { 'thread' : m.group(1)
           , 'title'  : m.group(2)
           , 'res'    : m.group(3)
           }


convert_dic = \
    { 'dat' :
        { '%l' : 'line'
        , '%n' : 'name'
        , '%M' : 'mail'
        , '%d' : 'date'
        , '%t' : 'time'
        , '%i' : 'id'
        , '%b' : 'be'
        , '%m' : 'message'
        , '%T' : 'title'
        }
    , 'subject' :
        { '%l' : 'line'
        , '%t' : 'thread'
        , '%T' : 'title'
        , '%r' : 'res'
        # , '%s' : 'speed'
        }
    }
default_format = { 'dat': '%n\t%M\t%d %t %i %b\t%m', 'subject': '%t\t%T\t%r' }
parcent_dot_re = re.compile(r'%.')
def convert(table, form):
    template = convert_dic[table['type']]
    dic = {}
    for key, value in template.iteritems():
        if value in table:
            dic[key] = table[value]
    if form is None:
        form = default_format[table['type']]
    return parcent_dot_re.sub(lambda m: dic.get(m.group(0), m.group(0)), form)


import argparse
import os
import sys

ch2dir=os.environ.get('CH2_DIR', os.environ['HOME'] + '/.2ch')
parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Format dat or subject.',
        epilog=\
"""format specifiers:
    thread:
        {0}
    board:
        {1}

default format strings:
    thread:
        {2}
    board:
        {3}
""".format(
            repr(convert_dic['dat']),
            repr(convert_dic['subject']),
            repr(default_format['dat']),
            repr(default_format['subject'])))
parser.add_argument('files', metavar='FILE', nargs='*')
parser.add_argument('-f', '--format', metavar='FORMAT')
parser.add_argument('-F', '--force', action='store_true')
args = parser.parse_args()

if len(args.files) == 0:
    for result in parse(sys.stdin):
        print convert(result, args.format)
else:
    for fname in args.files:
        with open(fname) as f:
            for result in parse(f):
                print convert(result, args.format)
