" vim: set foldmethod=marker :

set nocompatible
syntax on
" filetype plugin indent on " neobundle.vim overwrites this?
set modeline
let mapleader=" "

" you can look at http://www15.ocn.ne.jp/~tusr/vim/options_help.html

set autoindent
set smartindent

set expandtab
set shiftwidth=4

set relativenumber "相対行表示
set cursorline "カーソル行強調
set cursorcolumn "カーソル列強調
hi CursorColumn term=underline cterm=underline ctermbg=none
set report=0
set ruler
set list

" backup {{{
set backup
if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile
endif
"}}}

set history=128

set hlsearch " highlightする
set incsearch " incremental検索
" 大文字を混ぜて検索した場合だけ大文字/小文字を区別する
set ignorecase
set smartcase

" 日本語に対応 UTF-8を使う {{{
set fileencodings=utf-8,euc-jp,cp932,iso-2022-jp
set fileformats=unix,dos,mac
setl fenc=utf-8
setl ff=unix
" }}}

" 空白文字の表示 {{{
set listchars=trail:_,tab:>\ 
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/
"}}}

" 前回編集時の状態を復元 {{{
" http://d.hatena.ne.jp/lurker/20060508/1147091810
au BufWritePost * mkview
"autocmd BufReadPost * loadview
" }}}

" <Leader> o/O で空行挿入 {{{
" http://deris.hatenablog.jp/entry/20130404/1365086716
nnoremap <silent> <Leader>o   :<C-u>for i in range(1, v:count1) \| call append(line('.'),   '') \| endfor \| silent! call repeat#set(mapleader."o", v:count1)<CR>
nnoremap <silent> <Leader>O   :<C-u>for i in range(1, v:count1) \| call append(line('.')-1, '') \| endfor \| silent! call repeat#set(mapleader."O", v:count1)<CR>
" }}}

" This is not so useful
" " <Leader>> i/I/a/A で1文字挿入 {{{
" nnoremap <Leader>i   :<C-u>exec printf("norm %di%s", v:count1, nr2char(getchar()))<CR>
" nnoremap <Leader>I   :<C-u>exec printf("norm %dI%s", v:count1, nr2char(getchar()))<CR>
" nnoremap <Leader>a   :<C-u>exec printf("norm %da%s", v:count1, nr2char(getchar()))<CR>
" nnoremap <Leader>A   :<C-u>exec printf("norm %dA%s", v:count1, nr2char(getchar()))<CR>
" " }}}


" neobundle.vim {{ {
if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim
    call neobundle#rc(expand('~/.vim/bundle/'))
endif

" originalrepos on github
" plugin manageings
NeoBundle 'Shougo/neobundle.vim'
" Shougo/vimproc {{{
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
"}}}

" edit
NeoBundle 'tpope/vim-surround'
NeoBundle 'vim-scripts/repeat.vim'
NeoBundle 'kana/vim-smartchr'
NeoBundle 'Align'

" unite
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'

" completion
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'honza/snipmate-snippets'
NeoBundle 'ujihisa/neco-look'

" jump
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'matchit.zip'
" NeoBundle 'camelcasemotion'

" marking
NeoBundle 'nathanaelkane/vim-indent-guides'
"NeoBundle 'daisuzu/rainbowcyclone.vim'

" exec
NeoBundle 'thinca/vim-quickrun'

" markdown
"NeoBundle 'plasticboy/vim-markdown'
"NeoBundle 'suan/vim-instant-markdown'

" yank
NeoBundle 'YankRing.vim'

" c++
"NeoBundle 'Rip-Rip/clang_complete'
NeoBundle 'vim-jp/cpp-vim'
NeoBundle 'vim-scripts/opengl.vim'

" haskell
NeoBundle 'ujihisa/neco-ghc'
NeoBundle 'lukerandall/haskellmode-vim'
NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'bitc/vim-hdevtools'
NeoBundle 'eagletmt/unite-haddock'
NeoBundle 'dag/vim2hs'

" python
NeoBundle 'mitechie/pyflakes-pathogen'
NeoBundle 'sontek/rope-vim'
NeoBundle 'lambdalisue/vim-django-support'
NeoBundle 'davidhalter/jedi-vim' " require $ git submodule update --init

" html / css
NeoBundle 'mattn/zencoding-vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'hail2u/vim-css3-syntax'
" NeoBundle 'css_color.vim' " too slow

" colorscheme
"NeoBundle 'desert256.vim'
NeoBundle 'w0ng/vim-hybrid'

" tools
NeoBundle 'rkitover/vimpager'

" commentted-out plugins {{{
" syntax check
"NeoBundle 'scrooloose/syntastic'
"NeoBundle 'osyo-manga/shabadou.vim'
"NeoBundle 'osyo-manga/vim-watchdogs' " dep: shabadou

"NeoBundle 'VimClojure'
"NeoBundle 'Shougo/vimshell'
"NeoBundle 'jpalardy/vim-slime'
"NeoBundle 'https:/bitbucket.org/kovisoft/slimv'
"}}}

filetype plugin indent on     " required!
" }} }

" unite.vim {{{
" The prefix key.
nnoremap [unite] <Nop>
nmap <Leader>u [unite]
" unite.vim keymap
nnoremap [unite]u  :<C-u>Unite -no-split<Space>
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> [unite]F :<C-u>Unite -buffer-name=files file<CR>
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent> [unite]vr :UniteResume<CR>/"
"}}}

" unite-outline
nnoremap <silent> [unite]o :<C-u>Unite<Space>outline<CR>

" neocomplcache {{{
let g:neocomplcache_enable_at_startup = 1
" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"}}}

" neosnippet {{{
" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible( ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif
" Dictionary for snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'
"}}}

" Lokaltog/vim-easymotion {{{
" http://blog.remora.cx/2012/08/vim-easymotion.html
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
let g:EasyMotion_leader_key="<Leader>e"
let g:EasyMotion_grouping=1
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue
"}}}

" vim-instant-markdown
"let g:instant_markdown_slow = 1

" quickrun
let g:quickrun_config={}

" YankRing.vim {{{
nnoremap <silent> <Leader>yu :YRShow<CR>
nnoremap <Leader>y/ :YRSearch<Space>
"}}}

" haskell {{{

" haskellmode-vim
let g:haddock_browser='firefox'

" neco-ghc
let g:necoghc_enable_detailed_browse = 1

" unite-haddock
let g:unite_source_haddock_browser = 'firefox'

" vim2hs
let g:haskell_conceal_enumerations = 0
"}}}

" python {{{
let g:jedi#popup_on_dot = 0
" }}}

" colorscheme {{{
set t_Co=256
set background=light
let g:hybrid_use_Xresources = 1
colorscheme hybrid
" }}}

" vim-indent-guides {{{
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
" }}}

" clang_complete {{{
"let g:clang_exec='/usr/bin/clang'
"let g:clang_library_path='/usr/lib'
"let g:clang_snippets = 1
"let g:clang_user_options = '-std=c++11'
" }}}

" opengl.vim {{{
autocmd FileType c,cpp source $HOME/.vim/bundle/opengl.vim/syntax/opengl.vim
" }}}

" vim-smartchr {{{
" 演算子の間に空白を入れる
autocmd FileType c,cpp inoremap <buffer><expr> < search('^#include\%#', 'bcn')? ' <': smartchr#one_of('<', ' << ', ' < ')
autocmd FileType c,cpp inoremap <buffer><expr> > search('<.*\%#', 'bcn')? '>': smartchr#one_of(' > ' , ' >> ', '>')
autocmd FileType c,cpp inoremap <buffer><expr> + smartchr#one_of(' + ', '++', '+')
autocmd FileType c,cpp inoremap <buffer><expr> - smartchr#one_of(' - ', '--', '-')
autocmd FileType c,cpp inoremap <buffer><expr> / smartchr#one_of(' / ', '// ', '/// ', '/')
" *はポインタで使うので、空白はいれない
autocmd FileType c,cpp inoremap <buffer><expr> & smartchr#one_of('&', ' && ')
autocmd FileType c,cpp inoremap <buffer><expr> % smartchr#one_of(' % ', '%')
autocmd FileType c,cpp inoremap <buffer><expr> <Bar> smartchr#one_of(' <Bar> ', ' <Bar><Bar> ', '<Bar>')
autocmd FileType c,cpp inoremap <buffer><expr> , smartchr#one_of(', ', ',')
" 3項演算子の場合は、後ろのみ空白を入れる
autocmd FileType c,cpp inoremap <buffer><expr> ? smartchr#one_of('? ', '?')

" =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
" 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
autocmd FileType c,cpp inoremap <buffer><expr> = search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
				\ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
				\ : smartchr#one_of(' = ', ' == ', '=')

" 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
autocmd FileType c,cpp inoremap <buffer><expr> } smartchr#one_of('}', '}<cr>}')
autocmd FileType c,cpp inoremap <buffer><expr> ; smartchr#one_of(';', ';<cr>;')
" 「->」は入力しづらいので、..で置換え
autocmd FileType c,cpp inoremap <buffer><expr> . smartchr#loop('.', '->', '...')
" 行先頭での#入力で、プリプロセス命令文を入力
autocmd FileType c,cpp inoremap <buffer><expr> # search('^\(#.\+\)\?\%#','bcn')? smartchr#one_of('#define', '#include', '#ifdef', '#endif', '#'): '#'

autocmd FileType c,cpp inoremap <buffer><expr> " search('^#include\%#', 'bcn')? ' "': '"'
" if, for, while, switch文直後の(は自動で間に空白を入れる
autocmd FileType c,cpp inoremap <buffer><expr> ( search('\<\(\if\<bar>for\<bar>while\<bar>switch\)\%#', 'bcn')? ' (': '('
" }}}
